package UserInterface;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.DataLocation;
import model.Root;
import model.Users;
import util.Writer;

public class JF_Registration extends javax.swing.JInternalFrame {


    public JF_Registration() {
        initComponents();
        
        ID();
        ViewTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table_viewuser = new javax.swing.JTable();
        cb_authority = new javax.swing.JComboBox<>();
        lbl_authority = new javax.swing.JLabel();
        btn_register = new javax.swing.JButton();
        lbl_username = new javax.swing.JLabel();
        lbl_password = new javax.swing.JLabel();
        lbl_email = new javax.swing.JLabel();
        pf_password = new javax.swing.JPasswordField();
        tf_username = new javax.swing.JTextField();
        tf_email = new javax.swing.JTextField();
        btn_delete = new javax.swing.JButton();
        btn_edit = new javax.swing.JButton();
        lbl_users_name = new javax.swing.JLabel();
        lbl_userid = new javax.swing.JLabel();
        tf_users_name = new javax.swing.JTextField();
        tf_userid = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(1042, 513));

        table_viewuser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UserID", "Username", "User's Name", "Authority", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_viewuser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_viewuserMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table_viewuser);

        cb_authority.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Customer", "Client" }));

        lbl_authority.setText("Authority:");

        btn_register.setText("Register");
        btn_register.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_registerActionPerformed(evt);
            }
        });

        lbl_username.setText("Username:");

        lbl_password.setText("Password:");

        lbl_email.setText("Email:");

        btn_delete.setText("Delete");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        btn_edit.setText("Edit");
        btn_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editActionPerformed(evt);
            }
        });

        lbl_users_name.setText("Customer's/Company's Name:");

        lbl_userid.setText("Customer's/Company's ID:");

        tf_userid.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbl_userid)
                    .addComponent(lbl_authority)
                    .addComponent(lbl_users_name))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tf_users_name, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cb_authority, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf_userid, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbl_password)
                    .addComponent(lbl_email)
                    .addComponent(lbl_username))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(tf_username)
                    .addComponent(pf_password)
                    .addComponent(tf_email, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_register)
                .addGap(18, 18, 18)
                .addComponent(btn_delete)
                .addGap(18, 18, 18)
                .addComponent(btn_edit)
                .addGap(311, 311, 311))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cb_authority, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_authority))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_userid)
                            .addComponent(tf_userid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_users_name)
                            .addComponent(tf_users_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_username)
                            .addComponent(tf_username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_password)
                            .addComponent(pf_password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_email)
                            .addComponent(tf_email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_register)
                    .addComponent(btn_delete)
                    .addComponent(btn_edit))
                .addGap(81, 81, 81))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_registerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_registerActionPerformed
        Register();
    }//GEN-LAST:event_btn_registerActionPerformed

    private void table_viewuserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_viewuserMouseClicked
        //Onclick show data in textfields
        DefaultTableModel table = (DefaultTableModel)table_viewuser.getModel(); 
        int selectedRowIndex = table_viewuser.getSelectedRow();
        String id = table.getValueAt(selectedRowIndex, 0).toString();
        
        Writer w = new Writer(Root.class, Users.class);
        Root<Users> user = (Root<Users>) w.read(DataLocation.user);
        for (Users userid: user.getRoot()){
            if (userid.getUserID().equals(id)){
                cb_authority.setSelectedItem(userid.getUserAuthority());
                tf_userid.setText(userid.getUserID());
                tf_users_name.setText(userid.getUsers_Name());
                tf_username.setText(userid.getUsername());
                pf_password.setText(userid.getUserPassword());
                tf_email.setText(userid.getUserEmail());
            }
        }
    }//GEN-LAST:event_table_viewuserMouseClicked

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        Delete();
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void btn_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editActionPerformed
        Edit();
    }//GEN-LAST:event_btn_editActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_edit;
    private javax.swing.JButton btn_register;
    private javax.swing.JComboBox<String> cb_authority;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_authority;
    private javax.swing.JLabel lbl_email;
    private javax.swing.JLabel lbl_password;
    private javax.swing.JLabel lbl_userid;
    private javax.swing.JLabel lbl_username;
    private javax.swing.JLabel lbl_users_name;
    private javax.swing.JPasswordField pf_password;
    private javax.swing.JTable table_viewuser;
    private javax.swing.JTextField tf_email;
    private javax.swing.JTextField tf_userid;
    private javax.swing.JTextField tf_username;
    private javax.swing.JTextField tf_users_name;
    // End of variables declaration//GEN-END:variables

    public void ID() {
        //auto generate id
        Writer w = new Writer(Root.class, Users.class);
        Root<Users> user = (Root<Users>) w.read(DataLocation.user);
        int num = 1;
        for (Users id: user.getRoot()){
            id.getUserID();
            num++;
        }
        tf_userid.setText("US"+num);
    }
    
    public void Reset() {
        tf_userid.setText("");
        tf_users_name.setText("");
        tf_username.setText("");
        pf_password.setText("");
        tf_email.setText("");
    }
    
    public void ViewTable() {
        //View table with data
        String authority;
        String userid;
        String user_name;
        String username;
        String email;
        
        DefaultTableModel table = (DefaultTableModel)table_viewuser.getModel();
        Writer w = new Writer(Root.class, Users.class);
        Root<Users> user = (Root<Users>) w.read(DataLocation.user);
        for (Users table_user: user.getRoot()){
            authority = table_user.getUserAuthority();
            userid = table_user.getUserID();
            user_name = table_user.getUsers_Name();
            username = table_user.getUsername();
            email = table_user.getUserEmail();
            table.addRow(new Object[]{userid , username , user_name , authority, email});
        }
    }

    public void Delete(){
    
    }
    
    public void Edit(){
    
    }
    
    public void Register() {
        //Create new user
        String authority = cb_authority.getSelectedItem().toString();
        String userid = tf_userid.getText();
        String user_name = tf_users_name.getText();
        String username = tf_username.getText();
        char[] input = pf_password.getPassword();
        String password = new String(input);
        String email = tf_email.getText();
        
        Users user = new Users();
        Writer w = new Writer(Root.class, Users.class);
        Root<Users> users = (Root<Users>) w.read(DataLocation.user);
        //Root<Users> users = new Root();
        
        if (userid.isEmpty() || user_name.isEmpty() || username.isEmpty() || password.isEmpty() || email.isEmpty()){
            JOptionPane.showMessageDialog(null, "Error!!!Please make sure to fill in all information.");
        }
        else{
            user.setUserAuthority(authority);
            user.setUserID(userid);
            user.setUsers_Name(user_name);
            user.setUsername(username);
            user.setUserPassword(password);
            user.setUserEmail(email);
            
            users.add(user);
            w.write(DataLocation.user, users);
            System.out.println("Register Success");
            Reset();
            
            //Refresh table
            DefaultTableModel table = (DefaultTableModel)table_viewuser.getModel();
            table.setRowCount(0);
            ViewTable();
        }
    }
}
